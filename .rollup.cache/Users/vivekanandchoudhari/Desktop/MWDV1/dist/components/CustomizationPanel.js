import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Button } from './ui/Button';
import { Input } from './ui/Input';
import { Select } from './ui/Select';
import { Slider } from './ui/Slider';
import { Switch } from './ui/Switch';
import { Card } from './ui/Card';
import { Separator } from './ui/Separator';
import { Badge } from './ui/Badge';
import { Settings, RotateCcw, Save, Palette } from 'lucide-react';
import { useIconCustomization } from '../hooks/useIconCustomization';
export function CustomizationPanel({ isOpen, onClose, iconName, className = '' }) {
    const { customization, preferences, updateCustomization, updatePreferences, resetCustomization, applyPreferencesToCustomization, generateCustomizedSVG, generateCustomizedJSX, generateCustomizedImport } = useIconCustomization();
    if (!isOpen)
        return null;
    const colorPresets = [
        { name: 'Current Color', value: 'currentColor' },
        { name: 'MW Energy Blue', value: '#1d65af' },
        { name: 'MW Orange', value: '#4cb0e4' },
        { name: 'MW Flow Teal', value: '#00bcd4' },
        { name: 'Success Green', value: '#10b981' },
        { name: 'Warning Yellow', value: '#f59e0b' },
        { name: 'Danger Red', value: '#ef4444' },
        { name: 'Black', value: '#000000' },
        { name: 'White', value: '#ffffff' }
    ];
    const sizePresets = [16, 20, 24, 28, 32, 40, 48, 64];
    const strokeWidthPresets = [1, 1.5, 2, 2.5, 3, 4];
    return (_jsx("div", { className: `fixed inset-y-0 right-0 w-80 bg-white dark:bg-gray-900 border-l border-gray-200 dark:border-gray-700 shadow-xl overflow-y-auto z-50 ${className}`, children: _jsxs("div", { className: "p-4", children: [_jsxs("div", { className: "flex items-center justify-between mb-6", children: [_jsxs("div", { className: "flex items-center gap-2", children: [_jsx(Settings, { className: "w-5 h-5" }), _jsx("h2", { className: "text-lg font-semibold", children: "Icon Customization" })] }), _jsx(Button, { onClick: onClose, variant: "ghost", size: "sm", children: "\u00D7" })] }), iconName && (_jsxs("div", { className: "mb-4 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg", children: [_jsx(Badge, { variant: "outline", className: "mb-2", children: iconName }), _jsx("div", { className: "text-sm text-gray-600 dark:text-gray-400", children: "Customizing this icon" })] })), _jsxs(Card, { className: "p-4 mb-4", children: [_jsx("h3", { className: "font-medium mb-3 flex items-center gap-2", children: "Size & Stroke" }), _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { children: [_jsx("label", { className: "text-sm font-medium mb-2 block", children: "Size (px)" }), _jsxs("div", { className: "flex items-center gap-2 mb-2", children: [_jsx(Slider, { value: customization.size, onChange: (value) => updateCustomization({ size: value }), min: 12, max: 128, step: 4, className: "flex-1" }), _jsx(Input, { type: "number", value: customization.size, onChange: (e) => updateCustomization({ size: parseInt(e.target.value) || 24 }), className: "w-16 text-sm", min: 12, max: 128 })] }), _jsx("div", { className: "flex gap-1", children: sizePresets.map(size => (_jsx(Button, { onClick: () => updateCustomization({ size }), variant: customization.size === size ? 'primary' : 'ghost', size: "sm", className: "text-xs", children: size }, size))) })] }), _jsxs("div", { children: [_jsx("label", { className: "text-sm font-medium mb-2 block", children: "Stroke Width" }), _jsxs("div", { className: "flex items-center gap-2 mb-2", children: [_jsx(Slider, { value: customization.strokeWidth, onChange: (value) => updateCustomization({ strokeWidth: value }), min: 0.5, max: 5, step: 0.5, className: "flex-1" }), _jsx(Input, { type: "number", value: customization.strokeWidth, onChange: (e) => updateCustomization({ strokeWidth: parseFloat(e.target.value) || 2 }), className: "w-16 text-sm", min: 0.5, max: 5, step: 0.5 })] }), _jsx("div", { className: "flex gap-1", children: strokeWidthPresets.map(width => (_jsx(Button, { onClick: () => updateCustomization({ strokeWidth: width }), variant: customization.strokeWidth === width ? 'primary' : 'ghost', size: "sm", className: "text-xs", children: width }, width))) })] })] })] }), _jsxs(Card, { className: "p-4 mb-4", children: [_jsxs("h3", { className: "font-medium mb-3 flex items-center gap-2", children: [_jsx(Palette, { className: "w-4 h-4" }), "Colors"] }), _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { children: [_jsx("label", { className: "text-sm font-medium mb-2 block", children: "Stroke Color" }), _jsxs("div", { className: "flex items-center gap-2 mb-2", children: [_jsx(Input, { type: "color", value: customization.color === 'currentColor' ? '#000000' : customization.color, onChange: (e) => updateCustomization({ color: e.target.value }), className: "w-12 h-8 p-1" }), _jsx(Input, { type: "text", value: customization.color, onChange: (e) => updateCustomization({ color: e.target.value }), className: "flex-1 text-sm", placeholder: "currentColor" })] }), _jsx("div", { className: "grid grid-cols-3 gap-1", children: colorPresets.map(preset => (_jsxs(Button, { onClick: () => updateCustomization({ color: preset.value }), variant: customization.color === preset.value ? 'primary' : 'ghost', size: "sm", className: "text-xs justify-start", children: [_jsx("div", { className: "w-3 h-3 rounded mr-1 border border-gray-300", style: {
                                                            backgroundColor: preset.value === 'currentColor' ? '#6b7280' : preset.value
                                                        } }), preset.name] }, preset.value))) })] }), _jsxs("div", { children: [_jsx("label", { className: "text-sm font-medium mb-2 block", children: "Fill Color (Optional)" }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx(Input, { type: "color", value: customization.fillColor || '#000000', onChange: (e) => updateCustomization({ fillColor: e.target.value }), className: "w-12 h-8 p-1" }), _jsx(Input, { type: "text", value: customization.fillColor || '', onChange: (e) => updateCustomization({ fillColor: e.target.value || undefined }), className: "flex-1 text-sm", placeholder: "none" }), _jsx(Button, { onClick: () => updateCustomization({ fillColor: undefined }), variant: "ghost", size: "sm", className: "text-xs", children: "Clear" })] })] })] })] }), _jsxs(Card, { className: "p-4 mb-4", children: [_jsx("h3", { className: "font-medium mb-3", children: "CSS Class" }), _jsx(Input, { type: "text", value: customization.className || '', onChange: (e) => updateCustomization({ className: e.target.value || undefined }), placeholder: "icon-class", className: "text-sm" })] }), _jsx(Separator, { className: "my-4" }), _jsxs(Card, { className: "p-4 mb-4", children: [_jsx("h3", { className: "font-medium mb-3", children: "Preferences" }), _jsxs("div", { className: "space-y-3", children: [_jsxs("div", { className: "flex items-center justify-between", children: [_jsx("label", { className: "text-sm", children: "Include className prop" }), _jsx(Switch, { checked: preferences.includeClassName, onChange: (e) => updatePreferences({ includeClassName: e.target.checked }) })] }), _jsxs("div", { children: [_jsx("label", { className: "text-sm font-medium mb-1 block", children: "Naming Convention" }), _jsx(Select, { value: preferences.namingConvention, onChange: (e) => updatePreferences({
                                                namingConvention: e.target.value
                                            }), options: [
                                                { value: 'camelCase', label: 'camelCase' },
                                                { value: 'PascalCase', label: 'PascalCase' },
                                                { value: 'kebab-case', label: 'kebab-case' }
                                            ] })] }), _jsxs("div", { children: [_jsx("label", { className: "text-sm font-medium mb-1 block", children: "Preferred Format" }), _jsx(Select, { value: preferences.preferredFormat, onChange: (e) => updatePreferences({
                                                preferredFormat: e.target.value
                                            }), options: [
                                                { value: 'svg', label: 'SVG' },
                                                { value: 'jsx', label: 'JSX' },
                                                { value: 'import', label: 'Import' }
                                            ] })] })] })] }), _jsxs("div", { className: "flex gap-2", children: [_jsxs(Button, { onClick: resetCustomization, variant: "outline", size: "sm", className: "flex items-center gap-2", children: [_jsx(RotateCcw, { className: "w-4 h-4" }), "Reset"] }), _jsxs(Button, { onClick: applyPreferencesToCustomization, variant: "ghost", size: "sm", className: "flex items-center gap-2", children: [_jsx(Save, { className: "w-4 h-4" }), "Apply Defaults"] })] }), iconName && (_jsxs(Card, { className: "p-4 mt-4", children: [_jsx("h3", { className: "font-medium mb-3", children: "Preview" }), _jsxs("div", { className: "space-y-2 text-xs", children: [_jsxs("div", { children: [_jsx("strong", { children: "JSX:" }), _jsx("code", { className: "block mt-1 p-2 bg-gray-100 dark:bg-gray-800 rounded text-xs", children: generateCustomizedJSX(iconName) })] }), _jsxs("div", { children: [_jsx("strong", { children: "Import:" }), _jsx("code", { className: "block mt-1 p-2 bg-gray-100 dark:bg-gray-800 rounded text-xs", children: generateCustomizedImport(iconName) })] })] })] }))] }) }));
}
//# sourceMappingURL=CustomizationPanel.js.map