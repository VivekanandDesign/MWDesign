{"version":3,"file":"CopyIconButton.jsx","sourceRoot":"","sources":["../../src/components/CopyIconButton.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react'\nimport { \n  Copy, \n  Check, \n  ChevronDown, \n  Download, \n  Code, \n  FileText,\n  Loader2,\n  AlertCircle\n} from 'lucide-react'\nimport { Button } from '@/components/ui/Button'\nimport { CopyType } from '@/utils/svgExtractor'\nimport { useCopyIcon } from '@/hooks/useCopyIcon'\n\ninterface CopyIconButtonProps {\n  iconName: string\n  variant?: 'primary' | 'secondary' | 'ghost' | 'outline'\n  size?: 'sm' | 'md' | 'lg'\n  className?: string\n  showDropdown?: boolean\n  iconSize?: number\n  strokeWidth?: number\n}\n\nexport const CopyIconButton: React.FC<CopyIconButtonProps> = ({\n  iconName,\n  variant = 'primary',\n  size = 'sm',\n  className = '',\n  showDropdown = true,\n  iconSize = 24,\n  strokeWidth = 2\n}) => {\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false)\n  const { copyState, copyIcon, downloadIcon } = useCopyIcon()\n  const dropdownRef = useRef<HTMLDivElement>(null)\n\n  const isIconCopied = copyState.copiedIcon === iconName\n  const isLoading = copyState.isLoading\n\n  const handleCopy = async (type: CopyType) => {\n    const options = {\n      size: iconSize,\n      strokeWidth: strokeWidth,\n      removeIds: true,\n      addClasses: true\n    }\n\n    if (type === CopyType.DOWNLOAD) {\n      await downloadIcon(iconName, options)\n    } else {\n      await copyIcon(iconName, type, options)\n    }\n    \n    setIsDropdownOpen(false)\n  }\n\n  const getButtonText = () => {\n    if (isLoading) return 'Copying...'\n    if (isIconCopied) {\n      switch (copyState.copiedType) {\n        case CopyType.SVG: return 'SVG Copied!'\n        case CopyType.IMPORT: return 'Import Copied!'\n        case CopyType.JSX: return 'JSX Copied!'\n        case CopyType.DOWNLOAD: return 'Downloaded!'\n        default: return 'Copied!'\n      }\n    }\n    return 'Copy SVG'\n  }\n\n  const getButtonIcon = () => {\n    if (isLoading) return <Loader2 className=\"w-3 h-3 animate-spin\" />\n    if (isIconCopied) return <Check className=\"w-3 h-3\" />\n    return <Copy className=\"w-3 h-3\" />\n  }\n\n  const copyOptions = [\n    {\n      type: CopyType.SVG,\n      label: 'Copy SVG Code',\n      icon: <FileText className=\"w-4 h-4\" />,\n      description: 'Raw SVG markup'\n    },\n    {\n      type: CopyType.JSX,\n      label: 'Copy JSX Component',\n      icon: <Code className=\"w-4 h-4\" />,\n      description: 'React JSX format'\n    },\n    {\n      type: CopyType.IMPORT,\n      label: 'Copy Import Statement',\n      icon: <Copy className=\"w-4 h-4\" />,\n      description: 'Lucide import'\n    },\n    {\n      type: CopyType.DOWNLOAD,\n      label: 'Download SVG File',\n      icon: <Download className=\"w-4 h-4\" />,\n      description: 'Save as .svg file'\n    }\n  ]\n\n  if (!showDropdown) {\n    // Simple copy button without dropdown\n    return (\n      <Button\n        size={size}\n        variant={variant}\n        onClick={() => handleCopy(CopyType.SVG)}\n        disabled={isLoading}\n        className={`${className} ${isIconCopied ? 'bg-green-600 hover:bg-green-700' : ''}`}\n        title=\"Copy SVG code\"\n      >\n        {getButtonIcon()}\n        {size !== 'sm' && <span className=\"ml-1\">{getButtonText()}</span>}\n      </Button>\n    )\n  }\n\n  return (\n    <div className={`relative ${className}`} ref={dropdownRef}>\n      {/* Split Button */}\n      <div className=\"flex\">\n        {/* Main Copy Button */}\n        <Button\n          size={size}\n          variant={variant}\n          onClick={() => handleCopy(CopyType.SVG)}\n          disabled={isLoading}\n          className={`rounded-r-none border-r-0 ${\n            isIconCopied ? 'bg-green-600 hover:bg-green-700 border-green-600' : ''\n          }`}\n          title=\"Copy SVG code\"\n        >\n          {getButtonIcon()}\n          {size !== 'sm' && <span className=\"ml-1\">{getButtonText()}</span>}\n        </Button>\n\n        {/* Dropdown Toggle */}\n        <Button\n          size={size}\n          variant={variant}\n          onClick={() => setIsDropdownOpen(!isDropdownOpen)}\n          className={`rounded-l-none px-2 ${\n            isIconCopied ? 'bg-green-600 hover:bg-green-700 border-green-600' : ''\n          }`}\n          title=\"More copy options\"\n        >\n          <ChevronDown className={`w-3 h-3 transition-transform ${\n            isDropdownOpen ? 'rotate-180' : ''\n          }`} />\n        </Button>\n      </div>\n\n      {/* Dropdown Menu */}\n      {isDropdownOpen && (\n        <>\n          {/* Backdrop */}\n          <div \n            className=\"fixed inset-0 z-40\" \n            onClick={() => setIsDropdownOpen(false)}\n          />\n          \n          {/* Dropdown Content */}\n          <div className=\"absolute top-full left-0 mt-1 w-56 bg-white dark:bg-mw-gray-800 border border-mw-gray-200 dark:border-mw-gray-700 rounded-lg shadow-lg z-50\">\n            <div className=\"py-1\">\n              {copyOptions.map((option) => (\n                <button\n                  key={option.type}\n                  onClick={() => handleCopy(option.type)}\n                  disabled={isLoading}\n                  className=\"w-full px-4 py-3 text-left hover:bg-mw-gray-50 dark:hover:bg-mw-gray-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-start gap-3 transition-colors\"\n                >\n                  <span className=\"text-mw-gray-600 dark:text-mw-gray-400 mt-0.5\">\n                    {option.icon}\n                  </span>\n                  <div>\n                    <div className=\"text-sm font-medium text-mw-gray-900 dark:text-white\">\n                      {option.label}\n                    </div>\n                    <div className=\"text-xs text-mw-gray-500 dark:text-mw-gray-400\">\n                      {option.description}\n                    </div>\n                  </div>\n                </button>\n              ))}\n            </div>\n          </div>\n        </>\n      )}\n\n      {/* Error Toast */}\n      {copyState.error && (\n        <div className=\"absolute top-full left-0 mt-2 w-64 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-3 shadow-lg z-50\">\n          <div className=\"flex items-start gap-2\">\n            <AlertCircle className=\"w-4 h-4 text-red-600 dark:text-red-400 mt-0.5 flex-shrink-0\" />\n            <div>\n              <div className=\"text-sm font-medium text-red-800 dark:text-red-200\">\n                Copy Failed\n              </div>\n              <div className=\"text-xs text-red-600 dark:text-red-400\">\n                {copyState.error}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n\n/**\n * Simple icon copy button for minimal use cases\n */\nexport const SimpleCopyButton: React.FC<{\n  iconName: string\n  copyType?: CopyType\n  size?: number\n  className?: string\n}> = ({ \n  iconName, \n  copyType = CopyType.SVG, \n  size = 16,\n  className = '' \n}) => {\n  const { copyState, copyIcon } = useCopyIcon()\n  const isIconCopied = copyState.copiedIcon === iconName && copyState.copiedType === copyType\n\n  return (\n    <button\n      onClick={() => copyIcon(iconName, copyType, { size })}\n      className={`inline-flex items-center justify-center w-6 h-6 rounded hover:bg-mw-gray-100 dark:hover:bg-mw-gray-700 transition-colors ${className}`}\n      title={`Copy ${copyType.toUpperCase()}`}\n    >\n      {isIconCopied ? (\n        <Check className=\"w-3 h-3 text-green-600\" />\n      ) : (\n        <Copy className=\"w-3 h-3 text-mw-gray-600 dark:text-mw-gray-400\" />\n      )}\n    </button>\n  )\n}\n"]}