{"version":3,"file":"Modal.jsx","sourceRoot":"","sources":["../../../src/components/ui/Modal.tsx"],"names":[],"mappings":"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","sourcesContent":["import { createContext, useContext, useEffect, useRef, ReactNode } from 'react'\nimport { clsx } from 'clsx'\n\ninterface ModalContextType {\n  isOpen: boolean\n  onClose: () => void\n}\n\nconst ModalContext = createContext<ModalContextType | undefined>(undefined)\n\nexport interface ModalProps {\n  isOpen: boolean\n  onClose: () => void\n  children: ReactNode\n  className?: string\n  size?: 'sm' | 'md' | 'lg' | 'xl' | 'full'\n}\n\nexport const Modal = ({\n  isOpen,\n  onClose,\n  children,\n  className,\n  size = 'md'\n}: ModalProps) => {\n  const modalRef = useRef<HTMLDivElement>(null)\n\n  // Handle escape key\n  useEffect(() => {\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape' && isOpen) {\n        onClose()\n      }\n    }\n\n    if (isOpen) {\n      document.addEventListener('keydown', handleEscape)\n      document.body.style.overflow = 'hidden'\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleEscape)\n      document.body.style.overflow = 'unset'\n    }\n  }, [isOpen, onClose])\n\n  // Handle backdrop click\n  const handleBackdropClick = (e: React.MouseEvent) => {\n    if (e.target === e.currentTarget) {\n      onClose()\n    }\n  }\n\n  const sizeClasses = {\n    sm: 'max-w-md',\n    md: 'max-w-lg',\n    lg: 'max-w-2xl',\n    xl: 'max-w-4xl',\n    full: 'max-w-full m-4'\n  }\n\n  if (!isOpen) return null\n\n  return (\n    <ModalContext.Provider value={{ isOpen, onClose }}>\n      <div\n        className=\"fixed inset-0 z-50 flex items-center justify-center p-4 bg-black bg-opacity-50\"\n        onClick={handleBackdropClick}\n      >\n        <div\n          ref={modalRef}\n          className={clsx(\n            'relative w-full rounded-lg bg-white dark:bg-mw-gray-800 shadow-xl',\n            'max-h-[90vh] overflow-hidden',\n            sizeClasses[size],\n            className\n          )}\n          role=\"dialog\"\n          aria-modal=\"true\"\n        >\n          {children}\n        </div>\n      </div>\n    </ModalContext.Provider>\n  )\n}\n\nexport interface ModalHeaderProps {\n  children: ReactNode\n  className?: string\n}\n\nexport const ModalHeader = ({ children, className }: ModalHeaderProps) => {\n  const context = useContext(ModalContext)\n  \n  return (\n    <div className={clsx(\n      'flex items-center justify-between p-6 border-b border-mw-gray-200 dark:border-mw-gray-700',\n      className\n    )}>\n      <div className=\"flex-1\">{children}</div>\n      <button\n        onClick={context?.onClose}\n        className=\"ml-4 text-mw-gray-400 hover:text-mw-gray-600 dark:hover:text-mw-gray-200\"\n        aria-label=\"Close modal\"\n      >\n        <svg className=\"w-6 h-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n        </svg>\n      </button>\n    </div>\n  )\n}\n\nexport interface ModalBodyProps {\n  children: ReactNode\n  className?: string\n}\n\nexport const ModalBody = ({ children, className }: ModalBodyProps) => {\n  return (\n    <div className={clsx('p-6 overflow-y-auto', className)}>\n      {children}\n    </div>\n  )\n}\n\nexport interface ModalFooterProps {\n  children: ReactNode\n  className?: string\n}\n\nexport const ModalFooter = ({ children, className }: ModalFooterProps) => {\n  return (\n    <div className={clsx(\n      'flex items-center justify-end space-x-3 p-6 border-t border-mw-gray-200 dark:border-mw-gray-700',\n      className\n    )}>\n      {children}\n    </div>\n  )\n}\n"]}