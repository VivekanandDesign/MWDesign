{"version":3,"file":"ScrollArea.jsx","sourceRoot":"","sources":["../../../src/components/ui/ScrollArea.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAA;;AAEZ,OAAO,EAAE,UAAU,EAAE,MAAM,OAAO,CAAA;AAClC,OAAO,EAAE,IAAI,EAAE,MAAM,MAAM,CAAA;AAQ3B,MAAM,CAAC,MAAM,UAAU,GAAG,UAAU,CAClC,CAAC,EAAiD,EAAE,GAAG,EAAE,EAAE;QAA1D,EAAE,SAAS,EAAE,QAAQ,EAAE,IAAI,GAAG,OAAO,OAAY,EAAP,KAAK,cAA/C,iCAAiD,CAAF;IAC9C,OAAO,CACL,CAAC,GAAG,CACF,GAAG,CAAC,CAAC,GAAG,CAAC,CACT,SAAS,CAAC,CAAC,IAAI,CACb,0BAA0B,EAC1B,SAAS,CACV,CAAC,CACF,IAAI,KAAK,CAAC,CAEV;QAAA,CAAC,GAAG,CACF,SAAS,CAAC,CAAC,IAAI,CACb,iCAAiC,EACjC;YACE,eAAe,EAAE,IAAI,KAAK,MAAM;YAChC,iBAAiB,EAAE,IAAI,KAAK,QAAQ,IAAI,IAAI,KAAK,QAAQ;YACzD,gMAAgM,EAAE,IAAI,KAAK,OAAO;SACnN,CACF,CAAC,CACF,KAAK,CAAC,CAAC;YACL,cAAc,EAAE,IAAI,KAAK,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM;YAClD,cAAc,EAAE,IAAI,KAAK,OAAO,CAAC,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,MAAM;SAClE,CAAC,CAEF;UAAA,CAAC,QAAQ,CACX;QAAA,EAAE,GAAG,CACP;MAAA,EAAE,GAAG,CAAC,CACP,CAAA;AACH,CAAC,CACF,CAAA;AAED,UAAU,CAAC,WAAW,GAAG,YAAY,CAAA;AAMrC,MAAM,CAAC,MAAM,SAAS,GAAG,UAAU,CACjC,CAAC,EAAiD,EAAE,GAAG,EAAE,EAAE;QAA1D,EAAE,SAAS,EAAE,WAAW,GAAG,UAAU,OAAY,EAAP,KAAK,cAA/C,4BAAiD,CAAF;IAC9C,OAAO,CACL,CAAC,GAAG,CACF,GAAG,CAAC,CAAC,GAAG,CAAC,CACT,SAAS,CAAC,CAAC,IAAI,CACb,+CAA+C,EAC/C,WAAW,KAAK,UAAU;YACxB,oDAAoD,EACtD,WAAW,KAAK,YAAY;YAC1B,oDAAoD,EACtD,SAAS,CACV,CAAC,CACF,IAAI,KAAK,CAAC,CAEV;QAAA,CAAC,GAAG,CACF,SAAS,CAAC,CAAC,IAAI,CACb,iEAAiE,EACjE,WAAW,KAAK,UAAU,IAAI,QAAQ,EACtC,WAAW,KAAK,YAAY,IAAI,QAAQ,CACzC,CAAC,EAEN;MAAA,EAAE,GAAG,CAAC,CACP,CAAA;AACH,CAAC,CACF,CAAA;AAED,SAAS,CAAC,WAAW,GAAG,WAAW,CAAA","sourcesContent":["'use client'\n\nimport { forwardRef } from 'react'\nimport { clsx } from 'clsx'\n\nexport interface ScrollAreaProps extends React.HTMLAttributes<HTMLDivElement> {\n  children: React.ReactNode\n  type?: 'auto' | 'always' | 'scroll' | 'hover'\n  scrollHideDelay?: number\n}\n\nexport const ScrollArea = forwardRef<HTMLDivElement, ScrollAreaProps>(\n  ({ className, children, type = 'hover', ...props }, ref) => {\n    return (\n      <div\n        ref={ref}\n        className={clsx(\n          'relative overflow-hidden',\n          className\n        )}\n        {...props}\n      >\n        <div\n          className={clsx(\n            'h-full w-full rounded-[inherit]',\n            {\n              'overflow-auto': type === 'auto',\n              'overflow-scroll': type === 'always' || type === 'scroll',\n              'overflow-auto scrollbar-thin scrollbar-thumb-mw-gray-300 dark:scrollbar-thumb-mw-gray-600 scrollbar-track-transparent hover:scrollbar-thumb-mw-gray-400 dark:hover:scrollbar-thumb-mw-gray-500': type === 'hover'\n            }\n          )}\n          style={{\n            scrollbarWidth: type === 'hover' ? 'thin' : 'auto',\n            scrollbarColor: type === 'hover' ? '#d1d5db transparent' : 'auto'\n          }}\n        >\n          {children}\n        </div>\n      </div>\n    )\n  }\n)\n\nScrollArea.displayName = 'ScrollArea'\n\nexport interface ScrollBarProps extends React.HTMLAttributes<HTMLDivElement> {\n  orientation?: 'vertical' | 'horizontal'\n}\n\nexport const ScrollBar = forwardRef<HTMLDivElement, ScrollBarProps>(\n  ({ className, orientation = 'vertical', ...props }, ref) => {\n    return (\n      <div\n        ref={ref}\n        className={clsx(\n          'flex touch-none select-none transition-colors',\n          orientation === 'vertical' &&\n            'h-full w-2.5 border-l border-l-transparent p-[1px]',\n          orientation === 'horizontal' &&\n            'h-2.5 w-full border-t border-t-transparent p-[1px]',\n          className\n        )}\n        {...props}\n      >\n        <div\n          className={clsx(\n            'relative flex-1 rounded-full bg-mw-gray-200 dark:bg-mw-gray-700',\n            orientation === 'vertical' && 'w-full',\n            orientation === 'horizontal' && 'h-full'\n          )}\n        />\n      </div>\n    )\n  }\n)\n\nScrollBar.displayName = 'ScrollBar'\n"]}