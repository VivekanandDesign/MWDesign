{"version":3,"file":"Skeleton.jsx","sourceRoot":"","sources":["../../../src/components/ui/Skeleton.tsx"],"names":[],"mappings":"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","sourcesContent":["'use client'\n\nimport { forwardRef } from 'react'\nimport { clsx } from 'clsx'\n\nexport interface SkeletonProps extends React.HTMLAttributes<HTMLDivElement> {\n  variant?: 'text' | 'circular' | 'rectangular'\n  width?: string | number\n  height?: string | number\n  lines?: number\n  animation?: 'pulse' | 'wave' | 'none'\n}\n\nconst skeletonVariants = {\n  text: 'rounded',\n  circular: 'rounded-full',\n  rectangular: 'rounded-md'\n}\n\nconst skeletonAnimations = {\n  pulse: 'animate-pulse',\n  wave: 'animate-[wave_1.6s_ease-in-out_infinite]',\n  none: ''\n}\n\nexport const Skeleton = forwardRef<HTMLDivElement, SkeletonProps>(\n  ({ \n    className, \n    variant = 'text', \n    width,\n    height,\n    lines = 1,\n    animation = 'pulse',\n    style,\n    ...props \n  }, ref) => {\n    const getDefaultHeight = () => {\n      if (height) return height\n      switch (variant) {\n        case 'text': return '1rem'\n        case 'circular': return '2.5rem'\n        case 'rectangular': return '8rem'\n        default: return '1rem'\n      }\n    }\n\n    const getDefaultWidth = () => {\n      if (width) return width\n      switch (variant) {\n        case 'circular': return '2.5rem'\n        default: return '100%'\n      }\n    }\n\n    if (variant === 'text' && lines > 1) {\n      return (\n        <div className=\"space-y-2\">\n          {Array.from({ length: lines }).map((_, index) => (\n            <div\n              key={index}\n              ref={index === 0 ? ref : undefined}\n              className={clsx(\n                'bg-mw-gray-200 dark:bg-mw-gray-700',\n                skeletonVariants[variant],\n                skeletonAnimations[animation],\n                className\n              )}\n              style={{\n                width: index === lines - 1 ? '75%' : getDefaultWidth(),\n                height: getDefaultHeight(),\n                ...style\n              }}\n              {...(index === 0 ? props : {})}\n            />\n          ))}\n        </div>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={clsx(\n          'bg-mw-gray-200 dark:bg-mw-gray-700',\n          skeletonVariants[variant],\n          skeletonAnimations[animation],\n          className\n        )}\n        style={{\n          width: getDefaultWidth(),\n          height: getDefaultHeight(),\n          ...style\n        }}\n        {...props}\n      />\n    )\n  }\n)\n\nSkeleton.displayName = 'Skeleton'\n"]}