{"version":3,"file":"ToggleGroup.jsx","sourceRoot":"","sources":["../../../src/components/ui/ToggleGroup.tsx"],"names":[],"mappings":"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","sourcesContent":["'use client'\n\nimport React, { useState, createContext, useContext } from 'react'\nimport { clsx } from 'clsx'\n\nexport interface ToggleGroupProps {\n  type: 'single' | 'multiple'\n  value?: string | string[]\n  onValueChange?: (value: string | string[]) => void\n  defaultValue?: string | string[]\n  disabled?: boolean\n  size?: 'sm' | 'md' | 'lg'\n  variant?: 'default' | 'outline'\n  children: React.ReactNode\n  className?: string\n}\n\nexport interface ToggleGroupItemProps extends React.HTMLAttributes<HTMLButtonElement> {\n  value: string\n  disabled?: boolean\n  children: React.ReactNode\n}\n\nconst ToggleGroupContext = createContext<{\n  type: 'single' | 'multiple'\n  value: string | string[]\n  onValueChange: (value: string | string[]) => void\n  disabled: boolean\n  size: 'sm' | 'md' | 'lg'\n  variant: 'default' | 'outline'\n} | null>(null)\n\nconst toggleSizes = {\n  sm: 'h-8 px-2 text-xs',\n  md: 'h-9 px-3 text-sm',\n  lg: 'h-10 px-4 text-base'\n}\n\nconst toggleVariants = {\n  default: {\n    base: 'bg-transparent hover:bg-mw-gray-100 dark:hover:bg-mw-gray-800 text-mw-gray-700 dark:text-mw-gray-300',\n    selected: 'bg-mw-gray-100 dark:bg-mw-gray-800 text-mw-gray-900 dark:text-white'\n  },\n  outline: {\n    base: 'border border-mw-gray-200 dark:border-mw-gray-700 bg-transparent hover:bg-mw-gray-50 dark:hover:bg-mw-gray-800 text-mw-gray-700 dark:text-mw-gray-300',\n    selected: 'bg-mw-gray-900 dark:bg-white text-white dark:text-mw-gray-900 border-mw-gray-900 dark:border-white'\n  }\n}\n\nexport function ToggleGroup({\n  type,\n  value,\n  onValueChange,\n  defaultValue,\n  disabled = false,\n  size = 'md',\n  variant = 'default',\n  className,\n  children,\n  ...props\n}: ToggleGroupProps) {\n  const [internalValue, setInternalValue] = useState<string | string[]>(\n    defaultValue || (type === 'single' ? '' : [])\n  )\n\n  const currentValue = value !== undefined ? value : internalValue\n\n  const handleValueChange = (newValue: string | string[]) => {\n    if (value === undefined) {\n      setInternalValue(newValue)\n    }\n    onValueChange?.(newValue)\n  }\n\n  return (\n    <ToggleGroupContext.Provider\n      value={{\n        type,\n        value: currentValue,\n        onValueChange: handleValueChange,\n        disabled,\n        size,\n        variant\n      }}\n    >\n      <div\n        className={clsx(\n          'inline-flex items-center justify-center rounded-md',\n          className\n        )}\n        role=\"group\"\n        {...props}\n      >\n        {children}\n      </div>\n    </ToggleGroupContext.Provider>\n  )\n}\n\nexport function ToggleGroupItem({\n  value,\n  disabled,\n  className,\n  children,\n  onClick,\n  ...props\n}: ToggleGroupItemProps) {\n  const context = useContext(ToggleGroupContext)\n  \n  if (!context) {\n    throw new Error('ToggleGroupItem must be used within ToggleGroup')\n  }\n\n  const isSelected = context.type === 'single' \n    ? context.value === value\n    : Array.isArray(context.value) && context.value.includes(value)\n\n  const isDisabled = disabled || context.disabled\n\n  const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n    onClick?.(e)\n    \n    if (isDisabled) return\n\n    if (context.type === 'single') {\n      context.onValueChange(isSelected ? '' : value)\n    } else {\n      const currentValues = Array.isArray(context.value) ? context.value : []\n      const newValues = isSelected\n        ? currentValues.filter(v => v !== value)\n        : [...currentValues, value]\n      context.onValueChange(newValues)\n    }\n  }\n\n  const variantConfig = toggleVariants[context.variant]\n\n  return (\n    <button\n      onClick={handleClick}\n      disabled={isDisabled}\n      data-state={isSelected ? 'on' : 'off'}\n      className={clsx(\n        'inline-flex items-center justify-center whitespace-nowrap rounded-md font-medium transition-colors',\n        'focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-mw-blue-500',\n        'disabled:pointer-events-none disabled:opacity-50',\n        'first:rounded-l-md last:rounded-r-md [&:not(:first-child):not(:last-child)]:rounded-none',\n        toggleSizes[context.size],\n        isSelected ? variantConfig.selected : variantConfig.base,\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </button>\n  )\n}\n\n// Utility hook for controlled toggle groups\nexport function useToggleGroup(type: 'single' | 'multiple') {\n  const [value, setValue] = useState<string | string[]>(\n    type === 'single' ? '' : []\n  )\n  \n  return {\n    value,\n    setValue,\n    onValueChange: setValue\n  }\n}\n"]}