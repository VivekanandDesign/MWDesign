{"version":3,"file":"Tooltip.jsx","sourceRoot":"","sources":["../../../src/components/ui/Tooltip.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAA;AAEZ,OAAO,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAA;AAChC,OAAO,EAAE,IAAI,EAAE,MAAM,MAAM,CAAA;AAS3B,MAAM,UAAU,OAAO,CAAC,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,GAAG,KAAK,EAAE,SAAS,EAAgB;IACtF,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAA;IAEjD,MAAM,eAAe,GAAG;QACtB,GAAG,EAAE,sDAAsD;QAC3D,MAAM,EAAE,mDAAmD;QAC3D,IAAI,EAAE,oDAAoD;QAC1D,KAAK,EAAE,mDAAmD;KAC3D,CAAA;IAED,MAAM,YAAY,GAAG;QACnB,GAAG,EAAE,kIAAkI;QACvI,MAAM,EAAE,qIAAqI;QAC7I,IAAI,EAAE,kIAAkI;QACxI,KAAK,EAAE,mIAAmI;KAC3I,CAAA;IAED,OAAO,CACL,CAAC,GAAG,CAAC,SAAS,CAAC,uBAAuB,CACpC;MAAA,CAAC,GAAG,CACF,YAAY,CAAC,CAAC,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CACvC,YAAY,CAAC,CAAC,GAAG,EAAE,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CACxC,OAAO,CAAC,CAAC,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAClC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAElC;QAAA,CAAC,QAAQ,CACX;MAAA,EAAE,GAAG,CACL;MAAA,CAAC,SAAS,IAAI,CACZ,CAAC,GAAG,CACF,SAAS,CAAC,CAAC,IAAI,CACb,wFAAwF,EACxF,eAAe,CAAC,QAAQ,CAAC,EACzB,SAAS,CACV,CAAC,CAEF;UAAA,CAAC,OAAO,CACR;UAAA,CAAC,GAAG,CACF,SAAS,CAAC,CAAC,IAAI,CACb,2BAA2B,EAC3B,YAAY,CAAC,QAAQ,CAAC,CACvB,CAAC,EAEN;QAAA,EAAE,GAAG,CAAC,CACP,CACH;IAAA,EAAE,GAAG,CAAC,CACP,CAAA;AACH,CAAC","sourcesContent":["'use client'\n\nimport { useState } from 'react'\nimport { clsx } from 'clsx'\n\nexport interface TooltipProps {\n  content: React.ReactNode\n  children: React.ReactNode\n  position?: 'top' | 'bottom' | 'left' | 'right'\n  className?: string\n}\n\nexport function Tooltip({ content, children, position = 'top', className }: TooltipProps) {\n  const [isVisible, setIsVisible] = useState(false)\n\n  const positionClasses = {\n    top: 'bottom-full left-1/2 transform -translate-x-1/2 mb-2',\n    bottom: 'top-full left-1/2 transform -translate-x-1/2 mt-2',\n    left: 'right-full top-1/2 transform -translate-y-1/2 mr-2',\n    right: 'left-full top-1/2 transform -translate-y-1/2 ml-2'\n  }\n\n  const arrowClasses = {\n    top: 'top-full left-1/2 transform -translate-x-1/2 border-l-transparent border-r-transparent border-b-transparent border-t-mw-gray-900',\n    bottom: 'bottom-full left-1/2 transform -translate-x-1/2 border-l-transparent border-r-transparent border-t-transparent border-b-mw-gray-900',\n    left: 'left-full top-1/2 transform -translate-y-1/2 border-t-transparent border-b-transparent border-r-transparent border-l-mw-gray-900',\n    right: 'right-full top-1/2 transform -translate-y-1/2 border-t-transparent border-b-transparent border-l-transparent border-r-mw-gray-900'\n  }\n\n  return (\n    <div className=\"relative inline-block\">\n      <div\n        onMouseEnter={() => setIsVisible(true)}\n        onMouseLeave={() => setIsVisible(false)}\n        onFocus={() => setIsVisible(true)}\n        onBlur={() => setIsVisible(false)}\n      >\n        {children}\n      </div>\n      {isVisible && (\n        <div\n          className={clsx(\n            'absolute z-50 px-2 py-1 text-sm text-white bg-mw-gray-900 rounded-md whitespace-nowrap',\n            positionClasses[position],\n            className\n          )}\n        >\n          {content}\n          <div\n            className={clsx(\n              'absolute w-0 h-0 border-4',\n              arrowClasses[position]\n            )}\n          />\n        </div>\n      )}\n    </div>\n  )\n}\n"]}