{"version":3,"file":"Accordion.jsx","sourceRoot":"","sources":["../../../src/components/ui/Accordion.tsx"],"names":[],"mappings":"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","sourcesContent":["'use client'\n\nimport React, { useState } from 'react'\nimport { clsx } from 'clsx'\nimport { ChevronDown } from 'lucide-react'\n\nexport interface AccordionProps {\n  type?: 'single' | 'multiple'\n  defaultValue?: string | string[]\n  value?: string | string[]\n  onValueChange?: (value: string | string[]) => void\n  children: React.ReactNode\n  className?: string\n}\n\nexport interface AccordionItemProps {\n  value: string\n  children: React.ReactNode\n  className?: string\n}\n\nexport interface AccordionTriggerProps {\n  children: React.ReactNode\n  className?: string\n}\n\nexport interface AccordionContentProps {\n  children: React.ReactNode\n  className?: string\n}\n\nconst AccordionContext = React.createContext<{\n  type: 'single' | 'multiple'\n  value: string | string[]\n  onValueChange: (value: string | string[]) => void\n} | null>(null)\n\nconst AccordionItemContext = React.createContext<{\n  value: string\n  isOpen: boolean\n  toggle: () => void\n} | null>(null)\n\nexport function Accordion({ \n  type = 'single', \n  defaultValue, \n  value, \n  onValueChange, \n  children, \n  className \n}: AccordionProps) {\n  const [internalValue, setInternalValue] = useState<string | string[]>(\n    defaultValue || (type === 'multiple' ? [] : '')\n  )\n  \n  const currentValue = value ?? internalValue\n  const handleValueChange = onValueChange ?? setInternalValue\n\n  return (\n    <AccordionContext.Provider value={{ type, value: currentValue, onValueChange: handleValueChange }}>\n      <div className={clsx('w-full', className)}>\n        {children}\n      </div>\n    </AccordionContext.Provider>\n  )\n}\n\nexport function AccordionItem({ value, children, className }: AccordionItemProps) {\n  const context = React.useContext(AccordionContext)\n  if (!context) {\n    throw new Error('AccordionItem must be used within Accordion')\n  }\n\n  const isOpen = context.type === 'multiple' \n    ? (context.value as string[]).includes(value)\n    : context.value === value\n\n  const toggle = () => {\n    if (context.type === 'multiple') {\n      const currentValues = context.value as string[]\n      const newValues = isOpen\n        ? currentValues.filter(v => v !== value)\n        : [...currentValues, value]\n      context.onValueChange(newValues)\n    } else {\n      context.onValueChange(isOpen ? '' : value)\n    }\n  }\n\n  return (\n    <AccordionItemContext.Provider value={{ value, isOpen, toggle }}>\n      <div className={clsx('border-b border-mw-gray-200 dark:border-mw-gray-700', className)}>\n        {children}\n      </div>\n    </AccordionItemContext.Provider>\n  )\n}\n\nexport function AccordionTrigger({ children, className }: AccordionTriggerProps) {\n  const context = React.useContext(AccordionItemContext)\n  if (!context) {\n    throw new Error('AccordionTrigger must be used within AccordionItem')\n  }\n\n  return (\n    <button\n      type=\"button\"\n      onClick={context.toggle}\n      className={clsx(\n        'flex w-full items-center justify-between py-4 font-medium transition-all',\n        'text-left text-mw-gray-900 dark:text-mw-gray-100',\n        'hover:text-mw-blue-600 dark:hover:text-mw-blue-400',\n        'focus:outline-none focus:ring-2 focus:ring-mw-blue-500 focus:ring-offset-2 rounded-sm',\n        className\n      )}\n    >\n      {children}\n      <ChevronDown\n        className={clsx(\n          'h-4 w-4 shrink-0 transition-transform duration-200',\n          context.isOpen && 'rotate-180'\n        )}\n      />\n    </button>\n  )\n}\n\nexport function AccordionContent({ children, className }: AccordionContentProps) {\n  const context = React.useContext(AccordionItemContext)\n  if (!context) {\n    throw new Error('AccordionContent must be used within AccordionItem')\n  }\n\n  return (\n    <div\n      className={clsx(\n        'overflow-hidden transition-all duration-300',\n        context.isOpen ? 'animate-in slide-in-from-top-1' : 'animate-out slide-out-to-top-1 hidden'\n      )}\n    >\n      <div className={clsx('pb-4 pt-0 text-mw-gray-600 dark:text-mw-gray-400', className)}>\n        {children}\n      </div>\n    </div>\n  )\n}\n"]}